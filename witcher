Slip1:

//Wap in go to accept user choice and print answers using arithmetic operators.
 
 
package main
import "fmt"
func main(){
 var num1 int 
 var num2 int
 

 fmt.Println("enter first number")
fmt.Scanf("%d",&num1)
  fmt.Println("enter second number")
 fmt.Scanf("%d",&num2)
 
 var choice rune
 fmt.Println("ENter the choice(+,-):")
 fmt.Scanf("%c",&choice)
 
 switch choice{
 
 case '+':{
 fmt.Print("Adiition of num 1 and num2 is :")
 var c int
 c=num1+num2
 fmt.Printf("%d",c)
 }
 
 
 case '-':{
 fmt.Print("sub of num 1 and num2 is :")
 var c int
 c=num1-num2
 
 fmt.Printf("%d",c)
 }
 // and continue for the multilication and division operations
 }
 }
 
 

////////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
import time 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup() 

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.








slip2)


q1.A) Write a program in GO language to print Fibonacci series of n terms. 

package main 
import "fmt" 
func main(){ 
var i,n int 
a:=0 
b:=1 
fmt.Print("Enter The n Value:") 
fmt.Scan(&n) 
for i=0;i<n;i++{ 
fmt.Println(a) 
c:=a 
a=b 
b=c + b 
} 
} 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q2.a.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second










slip3)

Slip 3:
Q1.A.//Check whether number is palindrome or not
package main
import "fmt"
func palindrome(n int) {
original := n
rev := 0
for n != 0 {
a := n % 10
rev = rev*10 + a
n = n / 10
}
if original == rev {
fmt.Println("Palindrome")
} else {
fmt.Println("Not Palindrome")
}
}

func main() {
var n int
fmt.Println("Enter the number:")
fmt.Scanf("%d", &n)
palindrome(n)
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q.2 IOT

import RPi.GPIO as GPIO 
import time GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup()
///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.


slip4)

Slip 4:  Write a program in GO language to sort array elements in ascending order. 
Q2.B.

package main 
import ( 
 "fmt" 
 "sort" 
) 
func main() { 
 arr := []int{5, 2, 9, 1, 6} 
 sort.Ints(arr) 
 fmt.Println("Sorted array in ascending order:", arr) 
} 

OR


package main
import "fmt"

func main(){

arr:=[]int{10,2,40,50,12,30,405,4}

var i,j int
temp:=0
for i=0;i<len(arr);i++{
for j=0;j<len(arr);j++{
if arr[i]<arr[j]{
	
	temp=arr[i]
	arr[i]=arr[j]
	arr[j]=temp

}
}
}
fmt.Println("Number After SOrting: ",arr)
}

////////////////////////////////////////////////////////////////////////////

Q2.a.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1) 

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.





slip5)

Slip 5:
Q1. B) Write a program in GO language to accept n records of employee information 
(eno,ename,salary) and display records of employees having minimum salary.

package main 
import "fmt" 
type Employee struct{ 
 eno int 
 ename string 
 salary float64 
} 
func main(){ 
 var n int 
 fmt.Println("Enter the number of employee records:") 
 fmt.Scan(&n) 
 emp := make([]Employee,n) 
for i:=0;i<n;i++{ 
 var eno int 
 var ename string 
 var salary float64 
 fmt.Printf("Enter details for employee %d: \n",i+1) 
 fmt.Print("Employee Number: ") 
 fmt.Scan(&eno) 
 fmt.Print("Employee Name :") 
 fmt.Scan(&ename) 
 fmt.Print("Salary: ") 
 fmt.Scan(&salary) 
 emp[i]=Employee{eno,ename,salary} 
 } 
 minsalary := emp[0].salary 
 for i:=0;i<n;i++{ 
 if emp[i].salary < minsalary { 
 minsalary = emp[i].salary 
 } 
 } 
fmt.Println("\n Employees with Minimum Salary:") 
 for i:=0;i<n;i++{ 
 if emp[i].salary == minsalary { 
 fmt.Printf("Employee Number : %d , Employee Name ; %s Salary : 
%2f\n",emp[i].eno,emp[i].ename,emp[i].salary) 
} 
 } 
} 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
import time GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup() 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




slip6)

Slip6: 
Q1.B Write a program in GO language to copy all elements of one array into another using a method

ppackage main
import "fmt"

func copy(src []int,dest []int){

for i:=0;i<len(src);i++{
	dest[i]=src[i]
}}
func main(){

src:=[]int {12,34,56,78,10}

dest:=make([]int,len(src))
copy(src,dest)

fmt.Println("Destination: ",dest)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1) 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.





slip7)

Slip7: 
Q2.B. Write a program in GO language to create structure student. Writea method show() whose 
receiver is a pointer of struct student.

package main
import "fmt"
type student struct{  //define a struct called student
Name string
Age int
Grade int
}

// Method to display student info
func(s *student)show(){

fmt.Println("Name:",s.Name)
fmt.Println("Age: ",s.Age)
fmt.Println("Grade:",s.Grade)
}
func main(){
s:=student{ //  creating student obj
Name:"shubham",
Age: 21,
Grade:90,
}

s.show()  //calling the show method()
}


/////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second
 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




slip8)

Slip 8:
 Q1.A Write a program in GO language to accept the book details such as BookID, Title, Author, Price. 
Read and display the details of ‘n’ number of books 

package main 
import "fmt" 
type book struct{ 
 id int 
 title string 
 author string 
 price float64 
} 
func main(){ 
 var books1 book 
 var n int 
 fmt.Printf("Enter number of books:") 
 fmt.Scanf("%d",&n) 
 
 for i:=0;i<n;i++{ 
 fmt.Println("Enter Book id:") 
 fmt.Scanf("%d",&books1.id) 
 fmt.Printf("Enter Book title:") 
 fmt.Scanf("%s",&books1.title) 
 fmt.Printf("Enter Book author:") 
 fmt.Scanf("%s",&books1.author) 
 fmt.Println("Enter Book price:") 
 fmt.Scanf("%f",&books1.price) 
 
 fmt.Println("Book id:",books1.id) 
 fmt.Println("Book title:",books1.title) 
 fmt.Println("Book author:",books1.author) 
 fmt.Println("Book price:",books1.price) 
 } 
} 

////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
import time GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup() 

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.



slip9)

Slip 9:
Q1) Palindrome or not
package main
import "fmt"
func palindrome(n int) {
original := n
rev := 0
for n != 0 {
a := n % 10
rev = rev*10 + a
n = n / 10
}
if original == rev {
fmt.Println("Palindrome")
} else {
fmt.Println("Not Palindrome")
}
}

func main() {
var n int
fmt.Println("Enter the number:")
fmt.Scanf("%d", &n)
palindrome(n)
}
/////////////////////////////////   OR /////////////////
Q1.B. Write a program in GO language to create an interface shape that includes area and volume. 
Implements these methods in square and rectangle type. 

package main 
import "fmt" 
type shape interface{ 
 area() 
 volume() 
} 
type square struct{ 
 side int 
} 
type rectangle struct{ 
 l int 
 b int 
} 
func (s square)area()int{ 
 return s.side*s.side 
} 
func (s square)volume()int{ 
 return 0 
} 
func (r rectangle)area()int{ 
 return r.l*r.b 
} 
func (r rectangle)volume()int{ 
 return 0 
} 
func main(){ 
 sq:=square{side:5} 
 rec:=rectangle{l:10,b:5} 
 
 fmt.Println("Area:",sq.area()) 
 fmt.Println("vol:",sq.volume()) 
 fmt.Println("Area:",rec.area()) 
 fmt.Println("Area:",rec.volume()) 
 
} 


/////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT.

import RPi.GPIO as GPIO 
import time GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup() 

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




slip10)

Slip 10: 
//WAP to create an interface and display its values with the help of type assertion.

package main
import "fmt"

func main(){

var a interface{}// create an empty interface

a=10

interfacevalue:=a.(int)

fmt.Println(interfacevalue)
}

OR 

Slip 10: Write a program in GO language to read and write Fibonacci series to the using channel.
package main 
import "fmt" 
func fibonacci(ch chan<- int, n int) { 
 a, b := 0, 1 
 for i := 0; i < n; i++ { 
 ch <- a 
 a, b = b, a+b 
 } 
 close(ch) 
} 
func main() { 
 n := 10 // Number of Fibonacci numbers to generate 
 ch := make(chan int) 
 go fibonacci(ch, n) 
 for num := range ch { 
 fmt.Println(num) 
 } 
} 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second
 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.



slip11)

Slip 11: Write a program in GO language to check whether the accepted number is two digit or not. 

package main 
import "fmt" 
func main(){ 
 var n int 
 fmt.Printf("Enter the number:") 
 fmt.Scanf("%d",&n) 
 if n >= 10 && n <= 99 { 
 fmt.Println("The number is a two-digit number.") 
 } else { 
 fmt.Println("The number is not a two-digit number.") 
 } 
} 

///////////////////////////////////////////////////////////////////////////////////////////// 
Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.



slip12)

Slip 12:
Q1.A. Write a program in GO language to swap two numbers using call by reference concept. 
package main 
import "fmt" 
 func swap(a *int,b *int){ 
 temp := *a 
 *a = *b 
 *b = temp 
 } 
 func main(){ 
 var n1,n2 int 
 fmt.Printf("Enter number1") 
 fmt.Scanf("%d",&n1) 
 fmt.Printf("Enter number2") 
 fmt.Scanf("%d",&n2) 
 fmt.Println("Before swapping:") 
 fmt.Println("First number:", n1) 
 fmt.Println("Second number:", n2) 
 swap(&n1,&n2) 
 fmt.Println("After swapping:") 
 fmt.Println("First number:", n1) 
 fmt.Println("Second number:", n2) 
 } 
/////////////////////////////////////////////////////////////////////////////////////////////// 
Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1) 
///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.












slip13)


Slip 13:
Q1.A. Write a program in GO language to print sum of all even and odd numbers separately between 
1 to 100 
package main 
import "fmt" 
func main(){ 
 sumeven:=0 
 sumodd:=0 
 for i := 1; i <= 100; i++{ 
 if i%2 == 0{ 
 sumeven=sumeven+i 
 }else{ 
 sumodd=sumodd+i 
 } 
 } 
 fmt.Println("Sum of even number:",sumeven) 
 fmt.Println("Sum of odd number:",sumodd) 
} 
/////////////////////////////////////////////////////////////////////////////////////////////////// 
Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1)



///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.


slip14)

Slip 14:
Q1.A Write a program in GO language to demonstrate working of slices (like append, remove, copy). 
The ... operator is used to unpack the elements of the slices being 
concatenated. 
package main
import "fmt"
func main(){
	slice:=[]int{1,2,3,4,5}
	fmt.Println("Initial Slice:",slice)
	
	slice=append(slice,6,7)
	fmt.Println("After Append Slice:",slice)
	
	slice =slice[ 1 : ]
	fmt.Println("After rermove:",slice)

	newSlice:=make([]int, len(slice))
	copy(newSlice,slice)
	
	fmt.Println("Copied slice:",newSlice)
	
}
//////////////////////////////////////////////////////////////////////////////////////////////////// 

Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second
///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.



slip15)

Slip 15: Write a program in GO language to demonstrate function return multiple values.
package main 
import "fmt" 
func swap(x, y int) (int, int) { 
 return y, x 
} 
func main() { 
 a, b := 10, 20 
 a, b = swap(a, b) 
 fmt.Println("Swapped values:", a, b) 
} 

////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1) 

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




slip16)

Slip 16:
Q1. B) Write a program in GO language that prints out the numbers from0 to 10, waiting between 0 
and 250 ms after each one using the delay function 

package main 
import ( 
 "fmt" 
 "time" 
) 
func main() { 
 for i := 0; i <= 10; i++ { 
 fmt.Println(i) 
 time.Sleep(250 * time.Millisecond) 
 } 
} 

/////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
import time GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
cnt = 0 
Blink_Time = 1 # Change LED status every 1 second 
RED_LED = 14 
GPIO.setup(RED_LED, GPIO.OUT) 
try: 
 while True: 
 if cnt == 0: 
 GPIO.output(RED_LED, False) 
 cnt = 1 
 else: 
 GPIO.output(RED_LED, True) 
 cnt = 0 
 time.sleep(Blink_Time) 
except KeyboardInterrupt: 
 # Clean up GPIO on keyboard interrupt 
 GPIO.cleanup() 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.


slip17)

Slip 17:
Q1.A. Write a program in GO language to illustrate the concept of returning multiple values from a 
function. ( Add, Subtract, Multiply, Divide).

package main 
import "fmt" 
 func multiple(a,b int)(int,int,int,int){ 
 add:=a+b 
 sub:=a-b 
 mul:=a*b 
 div:=a/b 
 return add,sub,mul,div 
 } 
func main() { 
 a,b,c,d:=multiple(10,5) 
 fmt.Println("Addition:",a) 
 fmt.Println("substraction:",b) 
 fmt.Println("multiplication:",c) 
 fmt.Println("divsion:",d) 
} 

////////////////////////////////////////////////////////////////////////////////////////////////////

Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1) 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.





slip18)

Slip 18:
Q1.A. Write a program in GO language to print a multiplication table of number using function. 

package main 
import "fmt" 
func table(n int) { 
 fmt.Printf("Multiplication table of %d:\n", n) 
 for i := 1; i <= 10; i++ { 
 result := n * i 
 fmt.Printf("%d x %d = %d\n", n, i, result) 
 } 
} 
func main() { 
var n int 
fmt.Println("Enter the number:") 
fmt.Scanf("%d",&n) 
table(n) 
} 
/////////////////////////////////////////////////////////////////////////////////////////////////// 
Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second

///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.



slip19)

Slip 19:
Q1 Write a program in GO language to illustrate the function returning multiple values(add, subtract)

package main 
import "fmt" 
func addAndSubtract(a, b int) (int,int){ 
 add := a + b 
 subtract:= a - b 
 return add, subtract 
} 
func main() { 
 var num1 int 
 var num2 int 
 fmt.Println("Enter 1st number:") 
 fmt.Scanf("%d",&num1) 
 fmt.Println("Enter 2nd number:") 
 fmt.Scanf("%d",&num2) 
 a,b:= addAndSubtract(num1, num2) 
 fmt.Println("Addition:", a) 
 fmt.Println("Subtraction:", b) 
} 
//////////////////////////////////////////////////////////////////////////////////////////////////// 

Q2.IOT

import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library 
from time import sleep # Import the sleep function from the time module 
GPIO.setwarnings(False) # Ignore warning for now 
GPIO.setmode(GPIO.BOARD) # Use physical pin numbering 
Buzzer = 18 
GPIO.setup(Buzzer, GPIO.OUT, initial=GPIO.LOW) 
while True: # Run forever 
 GPIO.output(Buzzer, True) # Turn ON 
 sleep(1) # Sleep for 1 second 
 GPIO.output(Buzzer, False) # Turn OFF 
 sleep(1) # Sleep for 1 second
 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




slip20)

Slip 20:
Q Write a program in Go language how to create a channel and illustrate how to close a channel 
using for range loop and close function 
package main 
import"fmt" 
func main() { 
 ch := make(chan int) 
 go func() { 
 defer close(ch) 
 for i := 1; i <= 5; i++ { 
 ch <- i 
 } 
 }() 
 for i := 1; i <= 5; i++ { 
 fmt.Println("Received:",i) 
 } 
 fmt.Println("Channel closed") 
} 

/////////////////////////////////////////////////////////////////////////////////////////////////////
Q2.IOT

import RPi.GPIO as GPIO 
from time import sleep 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) 
RED_LED = 14 
GREEN_LED = 15 
GPIO.setup(RED_LED, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(GREEN_LED, GPIO.OUT, initial=GPIO.LOW) 
while True: 
 GPIO.output(RED_LED, True) 
 GPIO.output(GREEN_LED, False) 
 sleep(1) 
 GPIO.output(RED_LED, False) 
 GPIO.output(GREEN_LED, True) 
 sleep(1)
 
 ///////////////////////////////////////////////////////////

Observations:
1. Input:
Any obstacle that comes in the range of the sensor is detected. IR sensors actually measure the
heat being emitted from the object. So the heat is the actual input for the sensors. The IR
sensor gets its input from GPIO 21.
2. Output:
The output is shown by the LED’s and the buzzer. When an obstacle is detected, the Green
LED glows and buzzer is turned on, i.e. whenever heat is sensed by the sensor, output is
shown.
The output is shown by making the GPIO 15(Green LED) and GPIO 18 (buzzer) HIGH.

Conclusion:
We have successfully implemented the connection of IR sensor with Raspberry Pi/Beagle
bone/Arduino for obstacle detection. The output is shown by a glowing LED’s and buzzer.




